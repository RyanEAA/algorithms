from timeit import default_timer as timer
import random
import matplotlib.pyplot as plt
import math
import numpy as np

start = timer()

def insert_cabinet(cabinet, to_insert):
    check_location = len(cabinet) - 1               # end of the list
    insert_location = 0
    global stepcounter                              # set the insertion location to 0 so we can change it as we decrement the list
    while check_location >=0:                       # while we're not at the end of our list
        if to_insert > cabinet[check_location]:     # if our insertion number is greater than the selected position
            insert_location = check_location + 1    # our insertion location is that right of the number being compared
            check_location = -1                     # reset the location
        check_location = check_location - 1
        stepcounter += 1                            # else we decrement to the next left position and run the loop again
    cabinet.insert(insert_location, to_insert)      # when done, insert our selected number to where it needs to go 
    return(cabinet)                                 # return our new inserted number within the list


def insertion_sort(oldCabinet):
    newCabinet = []   
    global stepcounter                                          # empty list for our new sorted list
    while len(oldCabinet) > 0:                                  # while we don't have an empty list
        to_insert = oldCabinet.pop(0)                           # we set our insertion number to continue to pop off another position
        newCabinet = insert_cabinet(newCabinet, to_insert)
        stepcounter += 1                                        # we call our insertion function to put our numbers in a new list that compares them
    return(newCabinet)                                          # return our new list that's sorted


def check_steps(size_of_cabinet): # is used to count the number of steps it takes to sort a cabinet of a given size
    cabinet = [int(1000 * random.random()) for i in range (size_of_cabinet)] # creates a list of random numbers
    global stepcounter # creates a global variable
    stepcounter = 0 # resets the stepcounter to 0
    sortedCabinet = insertion_sort(cabinet) # sorts the cabinet
    return(stepcounter) # returns the number of steps it took to sort the cabinet


def plotSteps(): #main
    random.seed(8080) # sets the seed to 8080
    xs = list(range(1,100)) # creates a list of numbers from 1 to 100
    ys = [check_steps(x) for x in xs] # creates a list of the number of steps it takes to sort a cabinet of a given size
    ys_exp = [math.exp(x) for x in xs] # creates a list of the exponential of the numbers in xs
    ys_squred = [x**2 for x in xs] # creates a list of the numbers in xs squared
    ys_threehalves = [x**(3/2) for x in xs] # creates a list of the numbers in xs to the power of 3/2
    ys_cubed = [x**3 for x in xs] # creates a list of the numbers in xs cubed
    
    plt.plot(xs,ys) # plots the number of steps it takes to sort a cabinet of a given size
    axes = plt.gca() # gets the current axes
    axes.set_ylim([np.min(ys), np.max(ys)+140]) # sets the y axis to the minimum of ys and the maximum of ys plus 140
    plt.plot(xs,ys_exp, label = 'exp') # plots the exponential of the numbers in xs
    
    plt.plot(xs,ys, label = "linear") # plots the number of steps it takes to sort a cabinet of a given size
    plt.plot(xs,ys_squred, label = "squared") # plots the numbers in xs squared
    plt.plot(xs,ys_threehalves, label = "threehalves")  # plots the numbers in xs to the power of 3/2
    plt.plot(xs,ys_cubed, label = "cubed") # plots the numbers in xs cubed
    plt.plot(xs,ys_exp, label = "exp") # plots the exponential of the numbers in xs
    plt.legend() # creates a legend
    
    
    plt.plot(xs,ys) # plots the number of steps it takes to sort a cabinet of a given size
    plt.title("Steps Required for Insertion Sort for Random Cabinets")
    plt.xlabel("Number of Files in Random Cabinet")
    plt.ylabel("Steps Required to Sort Cabinet by Insertion Sort")
    
    plt.show()


stepcounter = 0
cabinet = [8,4,3,2,1,7]
print("Cabinet before sorting: ", cabinet, "\n")
size_of_cabinet = 10
sortedCabinet = insertion_sort(cabinet) # sorts the cabinet
end = timer() # ends the timer

print("Sorted Cabinet: ", sortedCabinet, "\n")
print("Our sort algorithm took ", end - start, "to run.", "\n")
print("Number of steps", check_steps(size_of_cabinet))
print(plotSteps())    

