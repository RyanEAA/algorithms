import numpy as np
import matplotlib.pylab as plt

N = 150 # number of subjects
#more subjects means the model becomes better at predicting
M = 10
xs = np.random.randn(M,N)
ws = np.random.randn(M)
ys = ws @ xs

#constant is the effect of x on y
#x can equal body mass
#y can equal blood sugar level
#constant is w which is the constant
#if you can measure constant you should be able 
#to perfectly predict 
#rgoing to remove effect of x2 on x1
#wx is effect of x2 on x1 using lease square
#uses wx and x2 to predict x1
#ex is mismatched from true x1 and prediced x1
#ex1 represents x1 without effects of x2
#x1 and x2 are independent variables which are not correlated

x = xs.copy()
y = ys.copy()
wy = np.zeros(M)
 

sx = np.zeros(M) + 0.00001
xx = np.zeros((M, M))
yx = np.zeros(M)
wx = np.zeros((M,M))
pred = np.zeros(N)

for n in range(N):
    x = xs[:, n]
    y = ys[n]
    #this allows for multiple regressions on different
    #variables
    for i in range(M):  
        sx[i] += (x[i]**2)
        for j in range(i+1, M):
            xx[i, j] += (x[j] * x[i])
            wx[i, j] = xx[i, j] / sx[i]
            x[j] -= wx[i, j] * x[i]
            
            
    for i in range(M):
        pred[n] += wy[i] * x[i]
        yx[i] += (y * x[i])
        wy[i] = yx[i]/sx[i]
        y -= wy[i] * x[i]
        

print("solutions", wy)



plt.plot(ys)
plt.plot(pred)
plt.legend(["truth", "prediction"])
plt.show()